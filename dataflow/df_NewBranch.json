{
	"name": "df_NewBranch",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_Azure_CSV_Emp",
						"type": "DatasetReference"
					},
					"name": "sourceemp"
				},
				{
					"dataset": {
						"referenceName": "DS_Azure_CSV_Dept",
						"type": "DatasetReference"
					},
					"name": "sourcedept"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_Azure_CSV",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "DS_Azure_CSV",
						"type": "DatasetReference"
					},
					"name": "sink2"
				}
			],
			"transformations": [
				{
					"name": "aggregateemp"
				},
				{
					"name": "joinempdept"
				}
			],
			"scriptLines": [
				"source(output(",
				"          empno as integer,",
				"          ename as string,",
				"          job as string,",
				"          mgr as integer,",
				"          hiredate as string,",
				"          sal as integer,",
				"          comm as integer,",
				"          deptno as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> sourceemp",
				"source(output(",
				"          deptno as integer,",
				"          dname as string,",
				"          location as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> sourcedept",
				"sourceemp aggregate(groupBy(deptno),",
				"     {Total Employees} = count(empno)) ~> aggregateemp",
				"sourceemp, sourcedept join(sourceemp@deptno == sourcedept@deptno,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinempdept",
				"joinempdept sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['empjoinout.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1",
				"aggregateemp sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['emptotal.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink2"
			]
		}
	}
}